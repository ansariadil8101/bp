buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.moowork.node" version "1.3.1"
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
    id 'application'
}

apply plugin: 'ManifestClasspath'
mainClassName = 'com.example.bp.BpApplication'

//apply plugin: 'io.spring.dependency-management'

archivesBaseName = 'bp'
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
    mapstructVersion = '1.3.0.Final'
    jacocoVersion = '0.8.5'
    ff4jVersion = '1.8.2'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.4.RELEASE")
    }
}

gitProperties {
    keys = ['git.branch',
            'git.build.host',
            'git.build.version',
            'git.remote.origin.url',
            'git.build.time',
            'git.build.user.email',
            'git.build.user.name',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.tags',
            'git.build.version',
            'git.commit.id',
            'git.commit.message.full',
            'git.commit.time',
            'git.commit.user.email',
            'git.commit.user.name']

    dateFormat = "yyyy-MM-dd HH:mm:ss Z"
    dateFormatTimeZone = "Europe/Kiev"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.unmappedTargetPolicy=ERROR',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework:spring-jdbc'

    implementation "org.ff4j:ff4j-spring-boot-starter:$ff4jVersion"
    implementation "org.ff4j:ff4j-spring-boot-web-api:$ff4jVersion"
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'io.rest-assured:rest-assured:4.0.0'
    testImplementation 'io.rest-assured:json-path:4.0.0'
    testImplementation 'io.rest-assured:xml-path:4.0.0'
    testImplementation 'org.testcontainers:postgresql:1.11.3'
    testImplementation "org.testcontainers:junit-jupiter:1.12.2"
    testImplementation 'com.github.database-rider:rider-core:1.7.3'
    testImplementation 'com.github.database-rider:rider-junit5:1.5.2'
    testImplementation 'com.github.database-rider:rider-spring:1.5.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mock-server:mockserver-netty:5.5.4'
    testImplementation 'io.rest-assured:json-schema-validator:3.0.0'

}

bootJar {
    launchScript() // creates fully executable archives
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
}


test {
    useJUnitPlatform()
}